datasource db {
  provider = "postgresql"
    url      = env("DATABASE_URL")
  //shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model Product {
  id String @id @default(cuid()) 
  name String 
  descritpion String
  price Float 
  brand String 
  category String 
  inStock Boolean
  image Image[]
  reviews Review[]
}

model Review {
  id String @id @default(cuid()) 
  userId String @unique
  productId String @unique
  rating Int
  comment String
  createdDate DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  user User? @relation(fields: [userId] , references: [id], onDelete: Cascade)
}

model User {
  id             String @id @default(cuid()) 
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hashedPasword String?
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  role Role @default(USER)
  accounts      Account[]
  orders        Order[]

}

model Order {
id     String @id @default(cuid())
userId String @map("user_id")
amount Float
currency String 
status String
deliveryStatus String?
createDate DateTime @default(now())
paymentIntentId String @unique
products CartProductType[]
address Address?

 user User @relation(fields: [userId], references: [id],
 onDelete: Cascade)
}
type CartProductType {
  id String
  name String
  description String
  category String
  brand String
  selectedImg Image
  quantity Int
  price Float
}

type Image {
  color String
  colorCode String
  image String
}
type Address {
  city String 
  country String
  line1 String
  line2 String
  postal_code String
  state String
}

enum Role {
    USER
    ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}